<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Math Whiz Addition Challenge</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Load a fun, rounded Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;700&display=swap" rel="stylesheet">
    
    <style>
        /* Custom styles */
        body {
            font-family: 'Baloo 2', cursive;
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        }
        
        .game-container {
            max-width: 600px;
            min-height: 500px;
        }

        /* Cute button style */
        .btn {
            @apply px-6 py-3 rounded-xl text-lg font-bold text-white shadow-lg transform transition-transform duration-150;
        }
        
        .btn-primary {
            @apply bg-blue-500 hover:bg-blue-600 active:scale-95;
        }
        
        .btn-secondary {
            @apply bg-pink-500 hover:bg-pink-600 active:scale-95;
        }

        .btn-submit {
             @apply bg-green-500 hover:bg-green-600 active:scale-95;
        }

        /* Style for the fraction display */
        .frac {
            display: inline-block;
            vertical-align: middle;
            margin: 0 0.2em;
            text-align: center;
        }
        .frac > sup {
            display: block;
            border-bottom: 2px solid currentColor;
            font-size: 0.9em;
            padding: 0 0.1em;
        }
        .frac > sub {
            display: block;
            font-size: 0.9em;
            padding: 0 0.1em;
        }
        
        /* Answer input fields */
        .answer-input {
            @apply w-24 text-center text-xl font-bold border-2 border-gray-300 rounded-lg shadow-inner focus:border-blue-500 focus:ring-2 focus:ring-blue-300;
        }
        
        /* Hide number input arrows */
        input[type=number]::-webkit-inner-spin-button, 
        input[type=number]::-webkit-outer-spin-button { 
          -webkit-appearance: none; 
          margin: 0; 
        }
        input[type=number] {
          -moz-appearance: textfield;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="game-container w-full bg-white rounded-3xl shadow-2xl p-6 md:p-10 flex flex-col justify-between">

        <!-- ===== Mode Selection Screen ===== -->
        <div id="mode-selection" class="flex flex-col items-center justify-center text-center h-full">
            <h1 class="text-4xl md:text-5xl font-bold text-blue-700 mb-4">Math Whiz</h1>
            <p class="text-2xl text-gray-600 mb-10">Addition Challenge! ‚ú®</p>
            <p class="text-xl text-gray-500 mb-6">Choose your game mode:</p>
            <div class="flex flex-col sm:flex-row gap-4">
                <button id="one-player-btn" class="btn btn-primary">1 Player vs. CPU ü§ñ</button>
                <button id="two-player-btn" class="btn btn-secondary">2 Players üßë‚Äçü§ù‚Äçüßë</button>
            </div>
        </div>

        <!-- ===== Game Screen (Hidden by default) ===== -->
        <div id="game-screen" class="hidden flex flex-col h-full">
            <!-- Scoreboard -->
            <div class="flex justify-between gap-4 mb-6">
                <div class="flex-1 bg-blue-100 p-4 rounded-2xl shadow-md text-center">
                    <h2 id="player1-name" class="text-xl font-bold text-blue-800">Player 1 üèÜ</h2>
                    <p id="player1-score" class="text-4xl font-bold text-blue-600">0</p>
                </div>
                <div class="flex-1 bg-pink-100 p-4 rounded-2xl shadow-md text-center">
                    <h2 id="player2-name" class="text-xl font-bold text-pink-800">Player 2 üèÜ</h2>
                    <p id="player2-score" class="text-4xl font-bold text-pink-600">0</p>
                </div>
            </div>

            <!-- Turn Display -->
            <div id="turn-display" class="text-center text-2xl font-bold text-gray-700 mb-6">
                Player 1's Turn!
            </div>

            <!-- Problem Area -->
            <div class="bg-gray-50 border-2 border-gray-200 rounded-2xl p-8 mb-6 text-center">
                <p id="problem-type" class="text-sm font-bold text-purple-600 uppercase tracking-wider mb-2">Problem (10 pts)</p>
                <p id="problem-text" class="text-4xl md:text-5xl font-bold text-gray-800">123 + 45</p>
            </div>

            <!-- Answer Area -->
            <div class="flex flex-col items-center gap-4 mb-6">
                <!-- Whole/Decimal Answer -->
                <div id="decimal-answer-inputs">
                    <input type="text" id="decimal-answer" class="answer-input w-48 h-16 text-3xl" placeholder="Your Answer">
                </div>
                <!-- Fraction Answer -->
                <div id="fraction-answer-inputs" class="hidden items-center justify-center gap-2">
                    <input type="number" id="frac-answer-whole" class="answer-input h-14" placeholder="whole">
                    <div class="flex flex-col items-center">
                        <input type="number" id="frac-answer-num" class="answer-input w-16 h-12" placeholder="num">
                        <div class="border-t-2 border-gray-700 w-16 my-1"></div>
                        <input type="number" id="frac-answer-den" class="answer-input w-16 h-12" placeholder="den">
                    </div>
                </div>
            </div>
            
            <!-- Feedback Message -->
            <div id="feedback-message" class="text-center text-2xl font-bold h-8 mb-4">&nbsp;</div>

            <!-- Submit Button -->
            <button id="submit-btn" class="btn btn-submit w-full mt-auto">Submit Answer</button>
        </div>

        <!-- ===== Game Over Modal (Hidden by default) ===== -->
        <div id="game-over-modal" class="hidden fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4">
            <div class="bg-white rounded-3xl shadow-2xl p-10 text-center flex flex-col items-center">
                <h2 class="text-5xl font-bold text-yellow-500 mb-4">üéâ Game Over! üéâ</h2>
                <p id="winner-message" class="text-3xl text-gray-700 mb-8">Player 1 Wins!</p>
                <button id="play-again-btn" class="btn btn-primary">Play Again?</button>
            </div>
        </div>

    </div>

    <script>
        // --- DOM Elements ---
        const modeSelection = document.getElementById('mode-selection');
        const gameScreen = document.getElementById('game-screen');
        const gameOverModal = document.getElementById('game-over-modal');

        const onePlayerBtn = document.getElementById('one-player-btn');
        const twoPlayerBtn = document.getElementById('two-player-btn');
        const playAgainBtn = document.getElementById('play-again-btn');
        const submitBtn = document.getElementById('submit-btn');

        const player1Name = document.getElementById('player1-name');
        const player2Name = document.getElementById('player2-name');
        const player1ScoreDisplay = document.getElementById('player1-score');
        const player2ScoreDisplay = document.getElementById('player2-score');

        const turnDisplay = document.getElementById('turn-display');
        const problemTypeDisplay = document.getElementById('problem-type');
        const problemText = document.getElementById('problem-text');

        const decimalAnswerInputs = document.getElementById('decimal-answer-inputs');
        const decimalAnswerField = document.getElementById('decimal-answer');
        
        const fractionAnswerInputs = document.getElementById('fraction-answer-inputs');
        const fracAnswerWhole = document.getElementById('frac-answer-whole');
        const fracAnswerNum = document.getElementById('frac-answer-num');
        const fracAnswerDen = document.getElementById('frac-answer-den');

        const feedbackMessage = document.getElementById('feedback-message');
        const winnerMessage = document.getElementById('winner-message');

        // --- Game State ---
        let gameMode = 1; // 1 or 2
        let player1Score = 0;
        let player2Score = 0;
        let currentPlayer = 1;
        let currentProblem = {};
        const WINNING_SCORE = 100;

        // --- Helper Functions (Math) ---

        /**
         * Finds the Greatest Common Divisor of two numbers.
         */
        function gcd(a, b) {
            return b === 0 ? a : gcd(b, a % b);
        }

        /**
         * Finds the Least Common Multiple of two numbers.
         */
        function lcm(a, b) {
            if (a === 0 || b === 0) return 0;
            return Math.abs(a * b) / gcd(a, b);
        }

        /**
         * Simplifies an improper fraction into a mixed number.
         * Returns { whole, num, den }
         */
        function simplify(num, den) {
            if (den === 0) return { whole: 0, num: 0, den: 1 }; // Avoid division by zero
            if (num === 0) return { whole: 0, num: 0, den: 1 };
            
            const common = gcd(Math.abs(num), Math.abs(den));
            const newNum = num / common;
            const newDen = den / common;
            
            const whole = Math.floor(newNum / newDen);
            const finalNum = newNum % newDen;
            
            // Ensure denominator is positive
            if (newDen < 0) {
                 return { whole: -whole, num: -finalNum, den: -newDen };
            }
            
            return { whole, num: finalNum, den: newDen };
        }

        /**
         * Formats a fraction for display as HTML.
         */
        function formatFraction(whole, num, den) {
            if (num === 0) {
                return `${whole}`;
            }
            if (whole === 0) {
                return `<span class="frac"><sup>${num}</sup>&frasl;<sub>${den}</sub></span>`;
            }
            return `${whole} <span class="frac"><sup>${num}</sup>&frasl;<sub>${den}</sub></span>`;
        }

        // --- Game Logic Functions ---

        /**
         * Starts the game with the selected mode.
         */
        function startGame(mode) {
            gameMode = mode;
            player1Score = 0;
            player2Score = 0;
            currentPlayer = 1;
            
            player1Name.textContent = 'Player 1 üèÜ';
            if (gameMode === 1) {
                player2Name.textContent = 'CPU ü§ñ';
            } else {
                player2Name.textContent = 'Player 2 üèÜ';
            }
            
            updateScoreDisplays();
            modeSelection.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            gameOverModal.classList.add('hidden');
            
            nextTurn();
        }

        /**
         * Updates the score displays.
         */
        function updateScoreDisplays() {
            player1ScoreDisplay.textContent = player1Score;
            player2ScoreDisplay.textContent = player2Score;
        }

        /**
         * Sets up the next turn for the current player.
         */
        function nextTurn() {
            clearInputs();
            feedbackMessage.innerHTML = '&nbsp;';
            submitBtn.disabled = false;
            
            if (currentPlayer === 1) {
                turnDisplay.textContent = "Player 1's Turn!";
                turnDisplay.classList.remove('text-pink-600');
                turnDisplay.classList.add('text-blue-600');
            } else {
                const P2Name = gameMode === 1 ? 'CPU' : 'Player 2';
                turnDisplay.textContent = `${P2Name}'s Turn!`;
                turnDisplay.classList.remove('text-blue-600');
                turnDisplay.classList.add('text-pink-600');
            }
            
            generateProblem();

            if (gameMode === 1 && currentPlayer === 2) {
                // CPU's turn
                submitBtn.disabled = true;
                setTimeout(cpuTurn, 2000);
            }
        }
        
        /**
         * Clears all answer input fields.
         */
        function clearInputs() {
            decimalAnswerField.value = '';
            fracAnswerWhole.value = '';
            fracAnswerNum.value = '';
            fracAnswerDen.value = '';
        }

        /**
         * Generates a new random problem.
         */
        function generateProblem() {
            const problemType = Math.floor(Math.random() * 3); // 0, 1, 2
            
            switch(problemType) {
                case 0: // 3-digit + 2-digit whole
                    generateWholeProblem();
                    break;
                case 1: // Decimals
                    generateDecimalProblem();
                    break;
                case 2: // Fractions
                    generateFractionProblem();
                    break;
            }
            
            // Display the problem
            problemText.innerHTML = currentProblem.question;
            problemTypeDisplay.textContent = `Problem (${currentProblem.points} pts)`;
            
            // Show correct inputs
            if (currentProblem.type === 'fraction') {
                decimalAnswerInputs.classList.add('hidden');
                fractionAnswerInputs.classList.remove('hidden');
                fractionAnswerInputs.classList.add('flex');
            } else {
                decimalAnswerInputs.classList.remove('hidden');
                fractionAnswerInputs.classList.add('hidden');
                fractionAnswerInputs.classList.remove('flex');
            }
        }
        
        function generateWholeProblem() {
            const num1 = Math.floor(Math.random() * 900) + 100; // 100-999
            const num2 = Math.floor(Math.random() * 90) + 10;   // 10-99
            currentProblem = {
                type: 'whole',
                question: `${num1} + ${num2}`,
                answer: num1 + num2,
                points: 10
            };
        }
        
        function generateDecimalProblem() {
            const precisionLevel = Math.floor(Math.random() * 3) + 1; // 1, 2, or 3 decimal places
            const precision = 10 ** precisionLevel;
            
            const num1 = (Math.floor(Math.random() * 99 * precision) + 1) / precision;
            const num2 = (Math.floor(Math.random() * 99 * precision) + 1) / precision;
            
            // Fix floating point issues
            let answer = parseFloat((num1 + num2).toFixed(precisionLevel));
            
            currentProblem = {
                type: 'decimal',
                question: `${num1.toFixed(precisionLevel)} + ${num2.toFixed(precisionLevel)}`,
                answer: answer,
                points: 20
            };
        }
        
        function generateFractionProblem() {
            let den1 = Math.floor(Math.random() * 10) + 2; // 2-11
            let den2 = Math.floor(Math.random() * 10) + 2;
            
            // Ensure unlike denominators
            while (den1 === den2) {
                den2 = Math.floor(Math.random() * 10) + 2;
            }
            
            // Allow for mixed numbers (up to 2 * denominator)
            let num1 = Math.floor(Math.random() * (den1 * 2)) + 1;
            let num2 = Math.floor(Math.random() * (den2 * 2)) + 1;
            
            // Get display parts
            const disp1 = simplify(num1, den1);
            const disp2 = simplify(num2, den2);
            
            const questionStr = `${formatFraction(disp1.whole, disp1.num, disp1.den)} + ${formatFraction(disp2.whole, disp2.num, disp2.den)}`;
            
            // Calculate answer
            const commonDen = lcm(den1, den2);
            const newNum1 = num1 * (commonDen / den1);
            const newNum2 = num2 * (commonDen / den2);
            
            const finalNum = newNum1 + newNum2;
            const finalAnswer = simplify(finalNum, commonDen);
            
            currentProblem = {
                type: 'fraction',
                question: questionStr,
                answer: finalAnswer, // { whole, num, den }
                points: 30
            };
        }

        /**
         * Simulates the CPU's turn.
         */
        function cpuTurn() {
            // 85% chance of getting it right
            const isCorrect = Math.random() > 0.15;
            
            if (isCorrect) {
                feedbackMessage.innerHTML = `<span class="text-green-600">‚úÖ CPU answered correctly!</span>`;
                updateScore(currentProblem.points);
            } else {
                feedbackMessage.innerHTML = `<span class="text-red-600">‚ùå CPU was incorrect.</span>`;
            }
            
            if (checkWinCondition()) {
                setTimeout(endGame, 1500);
            } else {
                // Switch back to Player 1
                currentPlayer = 1;
                setTimeout(nextTurn, 2000);
            }
        }

        /**
         * Checks the user's submitted answer.
         */
        function checkAnswer() {
            submitBtn.disabled = true;
            let isCorrect = false;
            
            if (currentProblem.type === 'whole' || currentProblem.type === 'decimal') {
                const userAnswer = parseFloat(decimalAnswerField.value);
                isCorrect = (userAnswer === currentProblem.answer);
            
            } else if (currentProblem.type === 'fraction') {
                // Get user input, default 0 for empty fields
                const userWhole = parseInt(fracAnswerWhole.value) || 0;
                const userNum = parseInt(fracAnswerNum.value) || 0;
                const userDen = parseInt(fracAnswerDen.value) || 1; // Default 1 to avoid /0
                
                // Convert correct answer to improper value
                const correctVal = currentProblem.answer.whole + (currentProblem.answer.num / currentProblem.answer.den);
                
                // Convert user answer to improper value
                const userVal = userWhole + (userNum / userDen);

                // Compare values (allowing for floating point inaccuracy)
                isCorrect = Math.abs(correctVal - userVal) < 0.0001;
            }
            
            // Provide feedback
            if (isCorrect) {
                feedbackMessage.innerHTML = `<span class="text-green-600">‚úÖ Correct! +${currentProblem.points} points!</span>`;
                updateScore(currentProblem.points);
            } else {
                feedbackMessage.innerHTML = `<span class="text-red-600">‚ùå Incorrect. Try again next time!</span>`;
            }

            // Check for win
            if (checkWinCondition()) {
                setTimeout(endGame, 1500);
            } else {
                // Switch player
                currentPlayer = (currentPlayer === 1) ? 2 : 1;
                setTimeout(nextTurn, 2000);
            }
        }
        
        /**
         * Adds points to the current player's score.
         */
        function updateScore(points) {
            if (currentPlayer === 1) {
                player1Score += points;
            } else {
                player2Score += points;
            }
            updateScoreDisplays();
        }

        /**
         * Checks if a player has reached the winning score.
         */
        function checkWinCondition() {
            return player1Score >= WINNING_SCORE || player2Score >= WINNING_SCORE;
        }

        /**
         * Ends the game and displays the winner.
         */
        function endGame() {
            gameScreen.classList.add('hidden');
            gameOverModal.classList.remove('hidden');
            
            if (player1Score > player2Score) {
                winnerMessage.textContent = 'Player 1 Wins!';
            } else if (player2Score > player1Score) {
                const P2Name = gameMode === 1 ? 'CPU' : 'Player 2';
                winnerMessage.textContent = `${P2Name} Wins!`;
            } else {
                winnerMessage.textContent = "It's a Tie!";
            }
        }

        /**
         * Resets the game back to the mode selection.
         */
        function resetGame() {
            gameOverModal.classList.add('hidden');
            modeSelection.classList.remove('hidden');
        }

        // --- Event Listeners ---
        onePlayerBtn.addEventListener('click', () => startGame(1));
        twoPlayerBtn.addEventListener('click', () => startGame(2));
        playAgainBtn.addEventListener('click', resetGame);
        submitBtn.addEventListener('click', checkAnswer);
        
        // Allow pressing Enter to submit
        decimalAnswerField.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') submitBtn.click();
        });
        fracAnswerDen.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') submitBtn.click();
        });

    </script>
</body>
</html>

